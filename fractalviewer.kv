#:import fractal fractal

<FractalViewer>:
    orientation: 'horizontal'
    fractal_panel: _fractal_panel
    view_panel: _view_panel
    color_panel: _color_panel
    FractalPanel:
        id: _fractal_panel
        size_hint_x: 1.0
    ViewPanel:
        id: _view_panel
        size_hint_x: 4.0
    ColorPanel:
        id: _color_panel
        size_hint_x: 1.0

<ViewPanel>:
    scene: _scene
    canvas.before:
        Color:
            rgba: [0.3, 0.3, 0.3, 1]
        Rectangle:
            size: self.size
            pos: self.pos
    Image:
        id: _scene
        size_hint: 1.0, 1.0
        pos_hint: {'center_x': 0.5, 'center_y': 0.5}
        allow_stretch: True
        offset_x: (self.size[0] - self.norm_image_size[0]) / 2 + self.pos[0]
        offset_y: (self.size[1] - self.norm_image_size[1]) / 2 + self.pos[1]
        on_touch_down:
            root.touch_down(args[1])

<ColorPanel>:
    orientation: 'vertical'
    padding: 10
    spacing: 10
    hue: _hue
    saturation: _saturation
    brightness: _brightness
    palette_image: _palette_image
    canvas.before:
        Color:
            rgba: [0.2, 0.2, 0.2, 1]
        Rectangle:
            size: self.size
            pos: self.pos
    ColorContent:
        size_hint_y: 5.0
        id: _hue
        title: 'Hue'
    ColorContent:
        size_hint_y: 5.0
        id: _saturation
        title: 'Saturation'
    ColorContent:
        size_hint_y: 5.0
        id: _brightness
        title: 'Brightness'
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: 1.5
        spacing: 10
        Label:
            font_size: root.width * 0.1
            text_size: self.size
            halign: 'left'
            text: 'Color Palette'
        Image:
            pos_hint: {'center_x': 0.5, 'center_y': 0.5}
            id: _palette_image
            allow_stretch: True
            keep_ratio: False

<ColorContent@BoxLayout>:
    orientation: 'vertical'
    spacing: 10
    title: ''
    easing: 'Fixed'
    begin: 1.0
    end: 0.0
    Label:
        size_hint_y: 1.0
        font_size: root.width * 0.1
        text_size: self.size
        halign: 'left'
        text: root.title
    GridLayout:
        size_hint_y: 3.0
        cols: 2
        Label:
            size_hint_x: 1.0
            size_hint_y: 1.0
            font_size: root.width * 0.1
            text: 'easing'
        Spinner:
            size_hint_x: 2.0
            text: root.easing
            values: fractal.Easing.MethodList()
            on_text:
                root.easing = self.text
                root.parent.ctrl.update_color()
        Label:
            size_hint_y: 1.5
            font_size: root.width * 0.1
            text: 'begin'
        Slider:
            min: 0.0
            max: 1.0
            value: root.begin
            on_value:
                root.begin = self.value
                root.parent.ctrl.update_color()
        Label:
            size_hint_y: 1.5
            font_size: root.width * 0.1
            text: 'end'
        Slider:
            min: 0.0
            max: 1.0
            value: root.end
            on_value:
                root.end = self.value
                root.parent.ctrl.update_color()
            disabled: root.easing == 'Fixed'

<FractalPanel>:
    orientation: 'vertical'
    padding: 10
    spacing: 10
    fractal_type: 'julia'
    center_pos: _center_pos
    constant: _constant
    image_size: _image_size
    steps: _steps
    zoom_rate: _zoom_rate
    mag_rate: _mag_rate
    processing_time: _processing_time
    canvas.before:
        Color:
            rgba: [0.2, 0.2, 0.2, 1]
        Rectangle:
            size: self.size
            pos: self.pos
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: 1.0
        spacing: 5
        Label:
            size_hint_y: 1.0
            font_size: root.width * 0.1
            text_size: self.size
            halign: 'left'
            text: 'Fractal Type'
        Spinner:
            size_hint_y: 1.5
            text: root.fractal_type
            values: ['julia', 'mandelbrot']
            on_text: root.fractal_type = self.text
    Coordinate:
        id: _center_pos
        size_hint_y: 2.0
        title: 'Center Position'
        param_x: 0.0
        param_y: 0.0
    Coordinate:
        id: _constant
        size_hint_y: 2.0
        title: 'Constant'
        param_x: -0.3
        param_y: -0.63
        disabled: root.fractal_type != 'julia'
    IntegerParameter:
        id: _image_size
        size_hint_y: 1.0
        title: 'Image Size'
        param: 800
    IntegerParameter:
        id: _steps
        size_hint_y: 1.0
        title: 'Steps'
        param: 256
    IntegerParameter:
        id: _zoom_rate
        size_hint_y: 1.0
        title: 'Zoom Rate'
        param: 1
    IntegerParameter:
        id: _mag_rate
        size_hint_y: 1.0
        title: 'Magnification Rate'
        param: 1
    ProcessingTime:
        id: _processing_time
        size_hint_y: 1.0
        param: 0
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: 2.0
        spacing: 10
        Button:
            text: 'Calculate'
            on_release: root.ctrl.calculate()
        Button:
            text: 'Save'
            on_release: root.ctrl.save()

<Coordinate@BoxLayout>:
    orientation: 'vertical'
    spacing: 5
    title: 'title'
    param_x: 0.0
    param_y: 0.0
    Label:
        size_hint_y: 1.0
        font_size: root.width * 0.1
        text_size: self.size
        halign: 'left'
        text: root.title
    GridLayout:
        size_hint_y: 2.0
        cols: 2
        spacing: 10
        Label:
            size_hint_x: 1.0
            font_size: root.width * 0.1
            text: 'x'
        TextInput:
            size_hint_x: 4.0
            padding_y: (self.height - self.font_size) / 2
            multiline: False
            text: '{:9.3e}'.format(root.param_x)
            on_text: root.param_x = float(self.text)
        Label:
            size_hint_x: 1.0
            font_size: root.width * 0.1
            text: 'y'
        TextInput:
            size_hint_x: 4.0
            padding_y: (self.height - self.font_size) / 2
            multiline: False
            text: '{:9.3e}'.format(root.param_y)
            on_text: root.param_y = float(self.text)

<IntegerParameter@BoxLayout>:
    title: 'title'
    param: 0
    orientation: 'vertical'
    spacing: 5
    Label:
        size_hint_y: 1.0
        font_size: root.width * 0.1
        text_size: self.size
        halign: 'left'
        text: root.title
    TextInput:
        size_hint_y: 1.5
        padding_y: (self.height - self.font_size) / 2
        text: '{:0}'.format(root.param)
        on_text: root.param = int(self.text.split('.')[0])
        multiline: False

<FloatParameter@BoxLayout>:
    title: 'title'
    param: 0
    orientation: 'vertical'
    spacing: 5
    Label:
        size_hint_y: 1.0
        font_size: root.width * 0.1
        text_size: self.size
        halign: 'left'
        text: root.title
    TextInput:
        size_hint_y: 1.5
        padding_y: (self.height - self.font_size) / 2
        text: '{}'.format(root.param)
        on_text: root.param = float(self.text)
        multiline: False

<ProcessingTime@BoxLayout>:
    title: 'Processing Time'
    param: 0.0
    orientation: 'vertical'
    spacing: 5
    Label:
        size_hint_y: 1.0
        font_size: root.width * 0.1
        text_size: self.size
        halign: 'left'
        text: root.title
    TextInput:
        size_hint_y: 1.5
        padding_y: (self.height - self.font_size) / 2
        text: '{:.5f}'.format(root.param)
        on_text: root.param = float(self.text)
        multiline: False
        readonly: True
        is_focusable: False